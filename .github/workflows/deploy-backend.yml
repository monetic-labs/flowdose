name: Deploy Backend

on:
  push:
    branches: [main, staging]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
      - 'deploy-backend-trigger'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    env:
      NODE_ENV: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
      GITHUB_ACTIONS: "true"
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      MEDUSA_ADMIN_EMAIL: ${{ secrets.MEDUSA_ADMIN_EMAIL }}
      MEDUSA_ADMIN_PASSWORD: ${{ secrets.MEDUSA_ADMIN_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@4.4.0 --activate
      
      - name: Install dependencies
        working-directory: backend
        run: yarn install
      
      - name: Run tests
        working-directory: backend
        run: yarn test || echo "No tests found, continuing..."
      
      - name: Build application
        working-directory: backend
        run: yarn build
      
      - name: Generate environment file
        run: |
          # Check if secrets are set, default to placeholders if not
          # This prevents empty values in the generated .env file
          echo "Checking for required secrets..."
          DB_URL="${{ secrets.BACKEND_DATABASE_URL }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          # For Redis, use the secure URL with auth
          REDIS="${{ secrets.BACKEND_REDIS_URL }}"
          REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}"
          JWT="${{ secrets.BACKEND_JWT_SECRET }}"
          COOKIE="${{ secrets.BACKEND_COOKIE_SECRET }}"
          ADMIN_CORS="${{ secrets.BACKEND_MEDUSA_ADMIN_CORS }}"
          STORE_CORS="${{ secrets.BACKEND_MEDUSA_STORE_CORS }}"
          BACKEND_URL="${{ secrets.BACKEND_MEDUSA_BACKEND_URL }}"
          ADMIN_EMAIL="${{ secrets.MEDUSA_ADMIN_EMAIL }}"
          ADMIN_PASSWORD="${{ secrets.MEDUSA_ADMIN_PASSWORD }}"
          
          # Set environment variables for use in the template
          ENV_NAME="${{ env.NODE_ENV }}"
          
          # Set defaults for any missing values
          if [ -z "$DB_URL" ]; then
            if [ -n "$DB_PASSWORD" ]; then
              echo "Using DB_PASSWORD to create DATABASE_URL"
              DB_URL="postgresql://doadmin:${DB_PASSWORD}@postgres-flowdose-staging-0423-do-user-17309531-0.f.db.ondigitalocean.com:25060/defaultdb?sslmode=require"
              # Print the first few characters to verify (with masking)
              echo "Created DB_URL with password: ${DB_PASSWORD:0:4}...${DB_PASSWORD: -4} (length: ${#DB_PASSWORD})"
            else
              echo "WARNING: No DB_PASSWORD provided, using placeholder"
              DB_URL="postgresql://doadmin:placeholder@postgres-flowdose-staging-0423-do-user-17309531-0.f.db.ondigitalocean.com:25060/defaultdb?sslmode=require"
            fi
          fi
          
          if [ -z "$REDIS" ]; then
            if [ -n "$REDIS_PASSWORD" ]; then
              echo "Using REDIS_PASSWORD to create REDIS_URL"
              REDIS="rediss://default:${REDIS_PASSWORD}@redis-flowdose-staging-0423-do-user-17309531-0.f.db.ondigitalocean.com:25061"
              # Print the first few characters to verify (with masking)
              echo "Created REDIS with password: ${REDIS_PASSWORD:0:4}...${REDIS_PASSWORD: -4} (length: ${#REDIS_PASSWORD})"
            else
              echo "WARNING: No REDIS_PASSWORD provided, using placeholder"
              REDIS="rediss://default:placeholder@redis-flowdose-staging-0423-do-user-17309531-0.f.db.ondigitalocean.com:25061"
            fi
          fi
          
          JWT=${JWT:-"$(openssl rand -hex 32)"}
          COOKIE=${COOKIE:-"$(openssl rand -hex 32)"}
          ADMIN_CORS=${ADMIN_CORS:-"https://admin-${ENV_NAME}.flowdose.xyz"}
          STORE_CORS=${STORE_CORS:-"https://${ENV_NAME}.flowdose.xyz"}
          BACKEND_URL=${BACKEND_URL:-"https://api-${ENV_NAME}.flowdose.xyz"}
          ADMIN_EMAIL=${ADMIN_EMAIL:-"${MEDUSA_ADMIN_EMAIL}"}
          ADMIN_PASSWORD=${ADMIN_PASSWORD:-"${MEDUSA_ADMIN_PASSWORD}"}
          
          # Define store URL based on environment
          if [ "$ENV_NAME" = "production" ]; then
            STORE_URL="https://flowdose.xyz"
          else
            STORE_URL="https://${ENV_NAME}.flowdose.xyz"
          fi
          
          # Write environment file line by line to avoid any quoting/newline issues
          ENV_FILE="backend/.env.${ENV_NAME}"
          echo "Writing environment file to $ENV_FILE..."
          
          echo "# Core Settings" > $ENV_FILE
          echo "NODE_ENV=${ENV_NAME}" >> $ENV_FILE
          echo "PORT=9000" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Database" >> $ENV_FILE
          echo "DATABASE_URL=${DB_URL}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Redis" >> $ENV_FILE
          echo "REDIS_URL=${REDIS}" >> $ENV_FILE
          echo "CACHE_REDIS_URL=${REDIS}" >> $ENV_FILE
          echo "EVENTS_REDIS_URL=${REDIS}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Security" >> $ENV_FILE
          echo "JWT_SECRET=${JWT}" >> $ENV_FILE
          echo "COOKIE_SECRET=${COOKIE}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# CORS Settings" >> $ENV_FILE
          echo "ADMIN_CORS=${ADMIN_CORS}" >> $ENV_FILE
          echo "STORE_CORS=${STORE_CORS}" >> $ENV_FILE
          echo "MEDUSA_ADMIN_CORS=${ADMIN_CORS}" >> $ENV_FILE
          echo "MEDUSA_STORE_CORS=${STORE_CORS}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# URL Configuration" >> $ENV_FILE
          echo "MEDUSA_BACKEND_URL=${BACKEND_URL}" >> $ENV_FILE
          echo "API_URL=${BACKEND_URL}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Admin and API Configuration" >> $ENV_FILE
          echo "ENABLE_ADMIN=true" >> $ENV_FILE
          echo "ENABLE_PUBLISHABLE_API_KEY=true" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Admin User" >> $ENV_FILE
          echo "MEDUSA_ADMIN_EMAIL=${ADMIN_EMAIL}" >> $ENV_FILE
          echo "MEDUSA_ADMIN_PASSWORD=${ADMIN_PASSWORD}" >> $ENV_FILE
          echo "" >> $ENV_FILE
          echo "# Storefront URL" >> $ENV_FILE
          echo "STORE_URL=${STORE_URL}" >> $ENV_FILE
          
          # Display the generated environment file (with sensitive data masked)
          echo "Generated environment file (sensitive values masked):"
          cat $ENV_FILE | sed 's/\(DATABASE_URL=\)[^[:space:]]*/\1****/g' | sed 's/\(JWT_SECRET=\)[^[:space:]]*/\1****/g' | sed 's/\(COOKIE_SECRET=\)[^[:space:]]*/\1****/g'
          
          # Verify DATABASE_URL has the password
          if grep -q "doadmin:.*@" $ENV_FILE; then
            DB_PASSWORD_IN_URL=$(grep "DATABASE_URL" $ENV_FILE | sed -n 's/.*doadmin:\([^@]*\)@.*/\1/p')
            echo "✅ DATABASE_URL contains password: ${DB_PASSWORD_IN_URL:0:4}...${DB_PASSWORD_IN_URL: -4} (length: ${#DB_PASSWORD_IN_URL})"
          else
            echo "❌ WARNING: DATABASE_URL is missing a password!"
          fi
          
          # Copy to temp location for deployment
          mkdir -p /tmp
          cp $ENV_FILE /tmp/backend.env
      
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_HOST_KEY }}" >> ~/.ssh/known_hosts
      
      - name: Copy environment file to server
        run: |
          scp -o StrictHostKeyChecking=no /tmp/backend.env root@${{ secrets[format('BACKEND_{0}_IP', env.NODE_ENV == 'production' && 'PROD' || 'STAGING')] }}:/tmp/backend.env
      
      - name: Deploy to ${{ env.NODE_ENV }}
        run: |
          chmod +x ./scripts/deploy-backend.sh
          set -e  # Exit immediately if a command fails
          echo "Deploying to ${{ env.NODE_ENV }} environment using IP ${{ secrets[format('BACKEND_{0}_IP', env.NODE_ENV == 'production' && 'PROD' || 'STAGING')] }}"
          # Export the DB_PASSWORD so it's accessible to the SSH session
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          # Pass DB_PASSWORD as an environment variable to the SSH session
          ./scripts/deploy-backend.sh ${{ env.NODE_ENV }} ${{ secrets[format('BACKEND_{0}_IP', env.NODE_ENV == 'production' && 'PROD' || 'STAGING')] }}
      
      - name: Verify deployment
        if: success()
        run: |
          echo "Backend successfully deployed to ${{ env.NODE_ENV }} environment!" 