name: Deploy to Staging

on:
  push:
    branches: [ staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@4.4.0 --activate

      - name: Debug Environment
        run: |
          echo "GitHub Actions runner user: $(whoami)"
          echo "SSH version: $(ssh -V 2>&1)"
          echo "OpenSSL version: $(openssl version)"
      
      - name: Debug SSH key format
        run: |
          # Display first line of key to check format (without exposing the actual key)
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | head -n 1 | echo "First line of key: $(cat)"
          # Check if key contains proper openssh header
          if echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "Key has OpenSSH format header"
          elif echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | grep -q "BEGIN RSA PRIVATE KEY"; then
            echo "Key has RSA format header"
          else
            echo "Key does not have standard header"
          fi

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ls -la ~/.ssh
          ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub || echo "Failed to extract public key, but continuing"
          if [ -f ~/.ssh/id_ed25519.pub ]; then
            echo "Public key content (safe to display):"
            cat ~/.ssh/id_ed25519.pub
          fi
          
      - name: Verify Backend Connection
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Verifying connection to backend: $SSH_USER@$BACKEND_HOST"
          ssh-keyscan -H $BACKEND_HOST >> ~/.ssh/known_hosts
          ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "echo 'SSH connection successful'"

      - name: Deploy Backend
        if: false  # Skip deployment until we fix the connection issue
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Copying files to backend server..."
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519" --exclude node_modules --exclude .git ./backend/ $SSH_USER@$BACKEND_HOST:/home/$SSH_USER/app/
          
          echo "Running deployment script..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "cd /home/$SSH_USER/app && [ -f scripts/deploy.sh ] && bash scripts/deploy.sh"
          
          echo "Checking SSL certificates..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST 'certbot renew --non-interactive || true'

      - name: Verify Storefront Connection
        if: false  # Skip storefront verification until we fix the backend connection
        env:
          STOREFRONT_HOST: ${{ secrets.STAGING_STOREFRONT_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Verifying connection to storefront: $SSH_USER@$STOREFRONT_HOST"
          ssh-keyscan -H $STOREFRONT_HOST >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST "echo 'SSH connection successful'"

      - name: Deploy Storefront
        if: false  # Skip deployment until we fix the connection issues
        env:
          STOREFRONT_HOST: ${{ secrets.STAGING_STOREFRONT_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Copying files to storefront server..."
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519" --exclude node_modules --exclude .git ./storefront/ $SSH_USER@$STOREFRONT_HOST:/home/$SSH_USER/app/
          
          echo "Running deployment script..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST "cd /home/$SSH_USER/app && [ -f scripts/deploy.sh ] && bash scripts/deploy.sh"
          
          echo "Checking SSL certificates..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST 'certbot renew --non-interactive || true' 