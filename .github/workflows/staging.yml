name: Deploy to Staging

on:
  push:
    branches: [ staging ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare yarn@4.4.0 --activate

      - name: Debug Environment
        run: |
          echo "GitHub Actions runner user: $(whoami)"
          echo "SSH version: $(ssh -V 2>&1)"
          echo "OpenSSL version: $(openssl version)"
      
      - name: Debug SSH key format
        run: |
          # Display first line of key to check format (without exposing the actual key)
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | head -n 1 | echo "First line of key: $(cat)"
          # Check if key contains proper openssh header
          if echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | grep -q "BEGIN OPENSSH PRIVATE KEY"; then
            echo "Key has OpenSSH format header"
          elif echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" | grep -q "BEGIN RSA PRIVATE KEY"; then
            echo "Key has RSA format header"
          else
            echo "Key does not have standard header"
          fi

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ls -la ~/.ssh
          ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub || echo "Failed to extract public key, but continuing"
          if [ -f ~/.ssh/id_ed25519.pub ]; then
            echo "Public key content (safe to display):"
            cat ~/.ssh/id_ed25519.pub
          fi
          
      - name: Verify Backend Connection
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Verifying connection to backend: $SSH_USER@$BACKEND_HOST"
          ssh-keyscan -H $BACKEND_HOST >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "echo 'SSH connection successful'"

      - name: Deploy Backend
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Copying files to backend server..."
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519" --exclude node_modules --exclude .git ./backend/ $SSH_USER@$BACKEND_HOST:/home/root/app/
          
          echo "Running deployment script..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "cd /home/root/app && chmod +x scripts/deploy.sh && NODE_TLS_REJECT_UNAUTHORIZED=0 bash scripts/deploy.sh"
          
          echo "Checking SSL certificates..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST 'certbot renew --non-interactive || true'
      
      - name: Wait for Backend to Start
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Waiting for backend to fully initialize..."
          # Initial delay to let PM2 start the process
          sleep 30
          
          # Poll the health endpoint until it responds or timeout
          MAX_RETRIES=10
          RETRY_COUNT=0
          HEALTH_OK=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Checking backend health (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
            if ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "curl -s http://localhost:9000/health" | grep -q "OK"; then
              HEALTH_OK=true
              echo "✅ Backend is healthy and responding!"
              break
            else
              echo "Backend not ready yet, waiting..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          
          if [ "$HEALTH_OK" != "true" ]; then
            echo "❌ Backend failed to respond after multiple attempts. Proceeding with caution..."
          fi
          
      - name: Generate Publishable Key
        env:
          BACKEND_HOST: ${{ secrets.STAGING_BACKEND_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          # Generate publishable API key
          echo "Generating publishable API key..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "cd /home/root/app && NODE_TLS_REJECT_UNAUTHORIZED=0 node -e \"
            const axios = require('axios');
            
            async function loginAdmin() {
              try {
                console.log('Logging in as admin...');
                const response = await axios.post('http://localhost:9000/admin/auth', {
                  email: 'admin@flowdose.xyz',
                  password: 'flowdose123'
                });
                return response.headers['set-cookie'][0].split(';')[0].split('=')[1];
              } catch (error) {
                console.error('Login error:', error.message);
                return null;
              }
            }
            
            async function createPublishableKey(cookie) {
              try {
                console.log('Creating publishable API key...');
                const response = await axios.post(
                  'http://localhost:9000/admin/publishable-api-keys', 
                  { title: 'Staging Key' },
                  { headers: { Cookie: 'connect.sid=' + cookie } }
                );
                return response.data.publishable_api_key.id;
              } catch (error) {
                console.error('Error creating publishable key:', error.message);
                return null;
              }
            }
            
            // Function to check health status
            async function checkHealth() {
              try {
                await axios.get('http://localhost:9000/health');
                return true;
              } catch (error) {
                console.error('Health check failed:', error.message);
                return false;
              }
            }
            
            async function main() {
              // Check health first
              const isHealthy = await checkHealth();
              if (!isHealthy) {
                console.error('Backend is not healthy, cannot generate key');
                process.exit(1);
              }
              
              const cookie = await loginAdmin();
              if (cookie) {
                const keyId = await createPublishableKey(cookie);
                if (keyId) {
                  console.log('PUBLISHABLE_KEY=' + keyId);
                  process.exit(0);
                }
              }
              console.error('Failed to generate a valid publishable key');
              process.exit(1);
            }
            
            main().catch(err => {
              console.error('Unhandled error:', err);
              process.exit(1);
            });
          \" > /tmp/publishable_key.txt" || {
            echo "ERROR: Failed to generate a valid publishable key. Creating a temporary key for storefront build."
            # For staging, we'll allow a fallback key to test the deployment
            echo "MEDUSA_PUBLISHABLE_KEY=pk_staging_fallback_$(date +%s | md5sum | head -c 8)" >> $GITHUB_ENV
            echo "Warning: Using fallback key. The storefront may not function correctly!"
            return 0
          }
          
          # Extract the publishable key
          echo "Extracting publishable key..."
          MEDUSA_PUBLISHABLE_KEY=$(ssh -i ~/.ssh/id_ed25519 $SSH_USER@$BACKEND_HOST "cat /tmp/publishable_key.txt | grep PUBLISHABLE_KEY | cut -d'=' -f2")
          
          # Verify we have a key
          if [ -z "$MEDUSA_PUBLISHABLE_KEY" ]; then
            echo "ERROR: Failed to extract a valid publishable key. Creating a temporary key for storefront build."
            # For staging, we'll allow a fallback key to test the deployment
            MEDUSA_PUBLISHABLE_KEY="pk_staging_fallback_$(date +%s | md5sum | head -c 8)"
            echo "Warning: Using fallback key. The storefront may not function correctly!"
          fi
          
          echo "Publishable key extracted: ${MEDUSA_PUBLISHABLE_KEY:0:5}*****"
          # Save the key for later steps
          echo "MEDUSA_PUBLISHABLE_KEY=${MEDUSA_PUBLISHABLE_KEY}" >> $GITHUB_ENV

      - name: Verify Storefront Connection
        env:
          STOREFRONT_HOST: ${{ secrets.STAGING_STOREFRONT_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
        run: |
          echo "Verifying connection to storefront: $SSH_USER@$STOREFRONT_HOST"
          echo "SSH_USER value: $SSH_USER"
          echo "STOREFRONT_HOST value: $STOREFRONT_HOST"
          
          # Make sure the key is in the known hosts
          ssh-keyscan -H $STOREFRONT_HOST >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts
          
          # Check SSH key permissions again
          ls -la ~/.ssh
          
          # Try to connect with verbose debugging
          ssh -vvv -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST "echo 'SSH connection successful'"

      - name: Deploy Storefront
        env:
          STOREFRONT_HOST: ${{ secrets.STAGING_STOREFRONT_HOST }}
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          MEDUSA_PUBLISHABLE_KEY: ${{ env.MEDUSA_PUBLISHABLE_KEY }}
        run: |
          # Verify we have a publishable key before continuing
          if [ -z "$MEDUSA_PUBLISHABLE_KEY" ]; then
            echo "ERROR: No publishable key available. Cannot deploy storefront."
            exit 1
          fi
          
          echo "Copying files to storefront server..."
          rsync -avz -e "ssh -i ~/.ssh/id_ed25519" --exclude node_modules --exclude .git ./storefront/ $SSH_USER@$STOREFRONT_HOST:/home/root/app/
          
          # Create/update .env with the publishable key
          echo "Setting up environment for deployment with publishable key..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST "cd /home/root/app && cp .env.staging .env && sed -i '/NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=/d' .env && echo 'NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=${MEDUSA_PUBLISHABLE_KEY}' >> .env"
          
          echo "Running deployment script..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST "cd /home/root/app && chmod +x scripts/deploy.sh && NODE_TLS_REJECT_UNAUTHORIZED=0 bash scripts/deploy.sh"
          
          echo "Checking SSL certificates..."
          ssh -i ~/.ssh/id_ed25519 $SSH_USER@$STOREFRONT_HOST 'certbot renew --non-interactive || true' 