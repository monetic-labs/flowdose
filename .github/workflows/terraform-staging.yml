name: "Terraform Staging Deployment"

on:
  push:
    branches:
      - staging
    paths:
      - 'backend/**'
      - 'storefront/**'
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
      - 'deploy-trigger'

jobs:
  terraform:
    name: "Deploy to Staging with Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
      AWS_REGION: us-east-1
      DIGITALOCEAN_TOKEN: ${{ secrets.DO_API_TOKEN }}
      DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
      SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_PRIVATE_KEY }}" > ~/.ssh/flowdose-do
          chmod 600 ~/.ssh/flowdose-do
          ssh-keyscan -H $(terraform output -raw backend_ip 2>/dev/null || echo "staging-flowdose-backend.domain.com") >> ~/.ssh/known_hosts
          ssh-keyscan -H $(terraform output -raw storefront_ip 2>/dev/null || echo "staging-flowdose-storefront.domain.com") >> ~/.ssh/known_hosts

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Import Existing Resources
        working-directory: ./terraform
        run: |
          # Import the existing resources
          terraform import module.backend_droplet.digitalocean_droplet.this 490588379 || echo "Failed to import backend droplet"
          terraform import module.storefront_droplet.digitalocean_droplet.this 490588593 || echo "Failed to import storefront droplet"
          terraform import module.postgres_db.digitalocean_database_cluster.this 3df3033d-5702-440e-8b2b-291fcb532f52 || echo "Failed to import postgres db"
          terraform import module.redis_db.digitalocean_database_cluster.redis f7981468-001b-4be3-80ff-710f2228c265 || echo "Failed to import redis db"
          terraform import module.media_storage.digitalocean_spaces_bucket.this staging-flowdose-bucket || echo "Failed to import media storage bucket"

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          # First refresh the state to see current resources
          terraform plan -refresh-only \
            -var="do_token=${{ secrets.DO_API_TOKEN }}" \
            -var="environment=staging" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="cookie_secret=${{ secrets.COOKIE_SECRET }}" \
            -var="revalidate_secret=${{ secrets.REVALIDATE_SECRET }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" \
            -var="resend_api_key=${{ secrets.RESEND_API_KEY }}" \
            -var="spaces_access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
            -var="spaces_secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -var="ssh_private_key_path=~/.ssh/flowdose-do"
          
          # Then apply with auto-approve
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DO_API_TOKEN }}" \
            -var="environment=staging" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="cookie_secret=${{ secrets.COOKIE_SECRET }}" \
            -var="revalidate_secret=${{ secrets.REVALIDATE_SECRET }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="admin_password=${{ secrets.ADMIN_PASSWORD }}" \
            -var="resend_api_key=${{ secrets.RESEND_API_KEY }}" \
            -var="spaces_access_key=${{ secrets.SPACES_ACCESS_KEY }}" \
            -var="spaces_secret_key=${{ secrets.SPACES_SECRET_KEY }}" \
            -var="ssh_private_key_path=~/.ssh/flowdose-do"
        
      - name: Get Server IPs
        id: server_ips
        working-directory: ./terraform
        run: |
          BACKEND_IP=$(terraform output -raw backend_ip)
          STOREFRONT_IP=$(terraform output -raw storefront_ip)
          echo "backend_ip=$BACKEND_IP" >> $GITHUB_OUTPUT
          echo "storefront_ip=$STOREFRONT_IP" >> $GITHUB_OUTPUT
          
      - name: Setup Environment Variables
        working-directory: ./scripts
        run: |
          BACKEND_IP="${{ steps.server_ips.outputs.backend_ip }}"
          STOREFRONT_IP="${{ steps.server_ips.outputs.storefront_ip }}"
          ./setup-env.sh staging $BACKEND_IP $STOREFRONT_IP
      
      - name: Deploy Backend
        working-directory: ./scripts
        run: |
          BACKEND_IP="${{ steps.server_ips.outputs.backend_ip }}"
          ./deploy-backend.sh staging $BACKEND_IP
      
      - name: Deploy Storefront
        working-directory: ./scripts
        run: |
          STOREFRONT_IP="${{ steps.server_ips.outputs.storefront_ip }}"
          ./deploy-storefront.sh staging $STOREFRONT_IP
      
      - name: Display Deployment Info
        working-directory: ./terraform
        run: |
          echo "Backend IP: $(terraform output -raw backend_ip)"
          echo "Storefront IP: $(terraform output -raw storefront_ip)"
          echo "API URL: $(terraform output -raw api_url)"
          echo "Admin URL: $(terraform output -raw admin_url)"
          echo "Storefront URL: $(terraform output -raw storefront_url)"
      
      - name: Verify SSL certificates
        working-directory: ./terraform
        run: |
          echo "Checking API SSL certificate..."
          API_URL=$(terraform output -raw api_url)
          SSL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_URL || echo "Failed")
          echo "API SSL check returned: $SSL_STATUS"
          
          echo "Checking Admin SSL certificate..."
          ADMIN_URL=$(terraform output -raw admin_url)
          SSL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ADMIN_URL || echo "Failed")
          echo "Admin SSL check returned: $SSL_STATUS"
          
          echo "Checking Storefront SSL certificate..."
          STOREFRONT_URL=$(terraform output -raw storefront_url)
          SSL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $STOREFRONT_URL || echo "Failed")
          echo "Storefront SSL check returned: $SSL_STATUS"
      
      - name: Verify API health
        run: |
          API_URL=$(cd terraform && terraform output -raw api_url)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" $API_URL/health || echo "Failed")
          echo "API health check returned: $STATUS"
          if [[ "$STATUS" != "200" ]]; then
            echo "Warning: API may not be fully available yet. This is expected after initial deployment."
          fi 